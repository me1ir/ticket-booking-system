from .forms import RegisterForm, BookingForm
import random
import time
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from .models import Movie, ShowTime, Booking, Genre
from .forms import BookingForm
from django.shortcuts import render, get_object_or_404
from .models import ShowTime, Seat
from .forms import SeatSelectionForm
from django.shortcuts import render, redirect
from django.contrib import messages
from django.db import transaction
from .models import ShowTime, Seat, Booking
from django.db import transaction
from .forms import SeatSelectionForm
from django.db.models import Count
from django.shortcuts import redirect
from django.contrib.auth import logout
from .forms import RegisterForm  # –í–º–µ—Å—Ç–æ CustomUserCreationForm
from django.contrib.auth import login
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from .models import Movie
from .forms import MovieRatingForm
from django.shortcuts import render
from .models import Movie  # –£–±–µ–¥–∏—Å—å, —á—Ç–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª –º–æ–¥–µ–ª—å Movie
from django.contrib.auth import logout
from django.shortcuts import redirect
from django.contrib import messages
from django.shortcuts import get_object_or_404, redirect
from .models import Booking
# views.py
import stripe
from django.conf import settings
from django.shortcuts import redirect, get_object_or_404
from django.views.decorators.csrf import csrf_exempt
from django.http import JsonResponse
from .models import Booking
from decimal import Decimal

stripe.api_key = settings.STRIPE_SECRET_KEY


def create_checkout_session(request, booking_id):
    booking = get_object_or_404(Booking, id=booking_id)

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—É—é —Å—É–º–º—É
    if booking.total_price == 0:
        messages.error(request, "–°—É–º–º–∞ –±—Ä–æ–Ω–∏ —Ä–∞–≤–Ω–∞ 0 ‚Äî –Ω–µ–ª—å–∑—è –æ–ø–ª–∞—Ç–∏—Ç—å.")
        return redirect('home')

    # üîí –°–æ–∑–¥–∞–Ω–∏–µ Stripe-—Å–µ—Å—Å–∏–∏
    session = stripe.checkout.Session.create(
        payment_method_types=['card'],
        line_items=[{
            'price_data': {
                'currency': 'usd',
                'product_data': {
                    'name': f'–ë–∏–ª–µ—Ç –Ω–∞ {booking.showtime.movie.title}',
                },
                'unit_amount': int(booking.total_price * 100),  # –≤ —Ü–µ–Ω—Ç–∞—Ö!
            },
            'quantity': 1,
        }],
        mode='payment',
        success_url=request.build_absolute_uri('/success/'),
        cancel_url=request.build_absolute_uri('/cancel/'),
    )

    print("Redirecting to Stripe session:", session.url)  # –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

    return redirect(session.url, code=303)


def payment_success(request):
    return render(request, 'tickets/success.html')

def payment_cancel(request):
    return render(request, 'tickets/cancel.html')


def checkout_view(request, booking_id):
    booking = get_object_or_404(Booking, id=booking_id)
    return render(request, 'tickets/checkout.html', {'booking': booking})


@login_required
def refund_booking(request, booking_id):
    booking = get_object_or_404(Booking, id=booking_id, user=request.user)

    if booking.is_refunded:
        messages.error(request, "–≠—Ç–æ—Ç –±–∏–ª–µ—Ç —É–∂–µ –±—ã–ª –≤–æ–∑–≤—Ä–∞—â–µ–Ω.")
    else:
        # –õ–æ–≥–∏–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–º–µ–Ω–∞ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ API (–Ω–∞–ø—Ä–∏–º–µ—Ä, Stripe)
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å –∫–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ —á–µ—Ä–µ–∑ –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±—Ä–æ–Ω–∏
        booking.is_refunded = True
        booking.save()

        messages.success(request, "–í–∞—à –±–∏–ª–µ—Ç —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω.")

    return redirect('profile')  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ—Ñ–∏–ª—è –∏–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –¥–µ—Ç–∞–ª—è–º–∏ –±—Ä–æ–Ω–∏


def logout_view(request):
    """–§—É–Ω–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logout(request)
    return redirect('home')  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é


def home(request):
    movies = Movie.objects.all()[:4]  # –í—ã–≤–æ–¥–∏–º 4 —Ñ–∏–ª—å–º–∞ –Ω–∞ –≥–ª–∞–≤–Ω—É—é
    return render(request, 'tickets/home.html', {'movies': movies})


@login_required
def rate_movie(request, movie_id):
    movie = get_object_or_404(Movie, id=movie_id)

    if request.method == 'POST':
        form = MovieRatingForm(request.POST)
        if form.is_valid():
            new_rating = int(form.cleaned_data['rating'])  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int
            movie.update_rating(new_rating)  # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥
            messages.success(request, '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É!')
            return redirect('movie_detail', movie_id=movie.id)  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ —Ñ–∏–ª—å–º
    else:
        form = MovieRatingForm()

    return render(request, 'tickets/rate_movie.html', {'form': form, 'movie': movie})

from django.shortcuts import render, get_object_or_404
from django.contrib.auth.decorators import login_required
from .models import Booking


@login_required
def booking_confirmation(request, booking_id):
    booking = get_object_or_404(Booking, id=booking_id, user=request.user)

    return render(request, 'tickets/booking_confirmation.html', {
        'booking': booking,
        'qr_code_url': booking.qr_code.url if booking.qr_code else None
    })


def register(request):
    if request.method == 'POST':
        form = RegisterForm(request.POST)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º RegisterForm
        if form.is_valid():
            user = form.save()
            login(request, user)  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥
            return redirect('home')  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –≥–ª–∞–≤–Ω—É—é
    else:
        form = RegisterForm()

    return render(request, 'tickets/register.html', {'form': form})

from django.shortcuts import render, get_object_or_404
from django.contrib.auth.decorators import login_required
from .models import Movie, ShowTime



from .models import Movie, Genre, Cinema
from django.db.models import Count

def movie_list(request):
    movies = Movie.objects.prefetch_related('genres').all()
    query = request.GET.get('q')
    genre_id = request.GET.get('genre')
    cinema_id = request.GET.get('cinema')
    sort_by = request.GET.get('sort_by', '-release_date')

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫—É
    if query:
        movies = movies.filter(title__icontains=query)

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∂–∞–Ω—Ä—É
    if genre_id:
        movies = movies.filter(genres__id=genre_id).distinct()

    # üî• –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä—É (–ø–æ —Å–≤—è–∑–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ ShowTime ‚Üí Hall ‚Üí Cinema)
    if cinema_id:
        movies = movies.filter(showtime__hall__cinema_id=cinema_id).distinct()

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    SORT_OPTIONS = {
        'title': 'title',
        '-title': '-title',
        'rating': 'rating',
        '-rating': '-rating',
        'release_date': 'release_date',
        '-release_date': '-release_date',
    }
    movies = movies.order_by(SORT_OPTIONS.get(sort_by, '-release_date'))

    # –ü–æ–ª—É—á–∞–µ–º –∂–∞–Ω—Ä—ã –∏ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä—ã
    genres = Genre.objects.annotate(movie_count=Count('movie')).filter(movie_count__gt=0).order_by('-movie_count', 'name')
    all_cinemas = Cinema.objects.all()

    context = {
        'movies': movies,
        'query': query,
        'selected_genre': genre_id,
        'selected_sort': sort_by,
        'genres': genres,
        'all_cinemas': all_cinemas,
    }
    view = request.GET.get('view', 'grid')  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–ª–∏—Ç–∫–∞
    context['view'] = view

    return render(request, 'tickets/movie_list.html', context)


def movie_detail(request, movie_id):
    movie = get_object_or_404(Movie.objects.prefetch_related('genres'), id=movie_id)
    showtimes = ShowTime.objects.filter(movie=movie).select_related('hall').order_by('start_time')

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–µ—Ä–æ–≤
    movie.actors = movie.actors.replace(',', ', ')

    return render(request, 'tickets/movie_detail.html', {
        'movie': movie,
        'showtimes': showtimes
    })

@login_required
def profile(request):
    bookings = Booking.objects.filter(user=request.user).order_by('-booking_time')
    return render(request, 'tickets/profile.html', {'bookings': bookings})


# –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–µ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
@login_required
def user_bookings(request):
    bookings = Booking.objects.filter(user=request.user).order_by('-booking_time')
    return render(request, 'tickets/user_bookings.html', {'bookings': bookings})


@login_required
def booking_detail(request, booking_id):
    booking = get_object_or_404(Booking, id=booking_id, user=request.user)
    return render(request, 'tickets/booking_detail.html', {'booking': booking})


from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.db import transaction
from decimal import Decimal

from .models import Movie, ShowTime, Booking, Seat, Genre, Ticket
from .forms import SeatSelectionForm, MovieRatingForm, RegisterForm

from decimal import Decimal
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.db import transaction
from .models import ShowTime, Seat, Booking, Ticket
from .forms import SeatSelectionForm

@login_required
@transaction.atomic
def seat_selection(request, showtime_id):
    showtime = get_object_or_404(ShowTime, id=showtime_id)

    if request.method == 'POST':
        print("üì® –ü–æ–ª—É—á–µ–Ω POST-–∑–∞–ø—Ä–æ—Å –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
        print("POST –¥–∞–Ω–Ω—ã–µ:", request.POST)

        form = SeatSelectionForm(request.POST, showtime=showtime)

        if form.is_valid():
            print("‚úÖ –§–æ—Ä–º–∞ –≤–∞–ª–∏–¥–Ω–∞")
            selected_seats = form.cleaned_data['seats']

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
            unavailable_seats = selected_seats.filter(is_available=False)
            if unavailable_seats.exists():
                messages.error(request, f"–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –º–µ—Å—Ç–∞ —É–∂–µ –∑–∞–Ω—è—Ç—ã: {', '.join(str(s) for s in unavailable_seats)}")
                return redirect('seat_selection', showtime_id=showtime_id)

            booking = Booking.objects.create(
                user=request.user,
                showtime=showtime,
                total_price=0
            )

            total_price = Decimal('0.0')

            for seat in selected_seats:
                ticket_type = request.POST.get(f'seat_type_{seat.id}', 'adult')
                print(f"üéü –ú–µ—Å—Ç–æ {seat.id} ‚Äî —Ç–∏–ø: {ticket_type}")

                Ticket.objects.create(
                    booking=booking,
                    seat=seat,
                    ticket_type=ticket_type
                )

                discount = {
                    'adult': Decimal('1.0'),
                    'student': Decimal('0.7'),
                    'child': Decimal('0.5')
                }
                multiplier = discount.get(ticket_type, Decimal('1.0'))
                total_price += seat.price * multiplier

                seat.is_available = False
                seat.save()

            booking.total_price = total_price

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            booking.generate_qr_code()

            booking.save()

            print("‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–ø–ª–∞—Ç–µ.")
            return redirect('checkout', booking_id=booking.id)

        else:
            print("‚ùå –§–æ—Ä–º–∞ –ù–ï–≤–∞–ª–∏–¥–Ω–∞:")
            print(form.errors)

    else:
        form = SeatSelectionForm(showtime=showtime)

    seats = Seat.objects.filter(hall=showtime.hall).order_by('row', 'number')
    rows = {}
    for seat in seats:
        rows.setdefault(seat.row, []).append(seat)

    return render(request, 'tickets/seat_selection.html', {
        'showtime': showtime,
        'form': form,
        'rows': rows
    })
